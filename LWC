//put in jsconfig.json
"checkJs": true,

//put it in top of component
/**
 * A myObject item
 * @typedef myObject
 * @property {number} id
 * @property {string} description
 * @property {boolean} priority
 */
 
 before declaring a new object put this and when you will be looking for all properties VScode will help you
/** @type {myObject} */
newObject = {
  id
}

 
// refresh view like Aura
window["$" + "A"].get('e.force:refreshView').fire();

// Lightning Data Service cache and wires are refreshed
getRecordNotifyChange([{recordId: this.recordId}]);


******
EVENTS
******
//Parent
<c-child onmyevent={handleMyEvent}></c-child>

//Child
const myEvent = new CustomEvent('myevent', {
   detail: 'someData',     
   bubbles: false,
   composed: false
});
this.dispatchEvent(myEvent);



******
Import JS function
******
//helper.js
const calc = (a, b)=> {
    return a * b;
}
export {calc};

//componentName.js
import { calc } from './helper'; //if from another component then import { calc } from 'c/helper';
calc(2, 9)




*******
Pub-sub
*******
//Pubsub with removed all the pageRef checking (Work in Community and Lighning App)
https://gist.github.com/kmesic/262887799fb70be94707cb0b87936e7b


https://trailhead.salesforce.com/en/content/learn/projects/lwc-build-flexible-apps/inter-comp-events

/**
 * A basic pub-sub mechanism for sibling component communication
 *
 * TODO - adopt standard flexipage sibling communication mechanism when it's available.
 */

const events = {};

const samePageRef = (pageRef1, pageRef2) => {
    const obj1 = pageRef1.attributes;
    const obj2 = pageRef2.attributes;
    return Object.keys(obj1)
        .concat(Object.keys(obj2))
        .every(key => {
            return obj1[key] === obj2[key];
        });
};

/**
 * Registers a callback for an event
 * @param {string} eventName - Name of the event to listen for.
 * @param {function} callback - Function to invoke when said event is fired.
 * @param {object} thisArg - The value to be passed as the this parameter to the callback function is bound.
 */
const registerListener = (eventName, callback, thisArg) => {
    // Checking that the listener has a pageRef property. We rely on that property for filtering purpose in fireEvent()
    if (!thisArg.pageRef) {
        throw new Error(
            'pubsub listeners need a "@wire(CurrentPageReference) pageRef" property',
        );
    }

    if (!events[eventName]) {
        events[eventName] = [];
    }
    const duplicate = events[eventName].find(listener => {
        return listener.callback === callback && listener.thisArg === thisArg;
    });
    if (!duplicate) {
        events[eventName].push({ callback, thisArg });
    }
};

/**
 * Unregisters a callback for an event
 * @param {string} eventName - Name of the event to unregister from.
 * @param {function} callback - Function to unregister.
 * @param {object} thisArg - The value to be passed as the this parameter to the callback function is bound.
 */
const unregisterListener = (eventName, callback, thisArg) => {
    if (events[eventName]) {
        events[eventName] = events[eventName].filter(
            listener =>
                listener.callback !== callback || listener.thisArg !== thisArg,
        );
    }
};

/**
 * Unregisters all event listeners bound to an object.
 * @param {object} thisArg - All the callbacks bound to this object will be removed.
 */
const unregisterAllListeners = thisArg => {
    Object.keys(events).forEach(eventName => {
        events[eventName] = events[eventName].filter(
            listener => listener.thisArg !== thisArg,
        );
    });
};

/**
 * Fires an event to listeners.
 * @param {object} pageRef - Reference of the page that represents the event scope.
 * @param {string} eventName - Name of the event to fire.
 * @param {*} payload - Payload of the event to fire.
 */
const fireEvent = (pageRef, eventName, payload) => {
    if (events[eventName]) {
        const listeners = events[eventName];
        listeners.forEach(listener => {
            if (samePageRef(pageRef, listener.thisArg.pageRef)) {
                try {
                    listener.callback.call(listener.thisArg, payload);
                } catch (error) {
                    // fail silently
                }
            }
        });
    }
};

export {
    registerListener,
    unregisterListener,
    unregisterAllListeners,
    fireEvent,
};








*******
PUBSUB for Lighning App and Community
*******


/**
 * A basic pub-sub mechanism for sibling component communication
 *
 * TODO - adopt standard flexipage sibling communication mechanism when it's available.
 */

const events = {};

/**
 * Registers a callback for an event
 * @param {string} eventName - Name of the event to listen for.
 * @param {function} callback - Function to invoke when said event is fired.
 * @param {object} thisArg - The value to be passed as the this parameter to the callback function is bound.
 */
const registerListener = (eventName, callback, thisArg) => {

    if (!events[eventName]) {
        events[eventName] = [];
    }

    const duplicate = events[eventName].find(listener => {
        return listener.callback === callback && listener.thisArg === thisArg;
    });

    if (!duplicate) {
        events[eventName].push({ callback, thisArg });
    }
};

/**
 * Unregisters a callback for an event
 * @param {string} eventName - Name of the event to unregister from.
 * @param {function} callback - Function to unregister.
 * @param {object} thisArg - The value to be passed as the this parameter to the callback function is bound.
 */
const unregisterListener = (eventName, callback, thisArg) => {
    if (events[eventName]) {
        events[eventName] = events[eventName].filter(
            listener =>
                listener.callback !== callback || listener.thisArg !== thisArg
        );
    }
};

/**
 * Unregisters all event listeners bound to an object.
 * @param {object} thisArg - All the callbacks bound to this object will be removed.
 */
const unregisterAllListeners = thisArg => {
    Object.keys(events).forEach(eventName => {
        events[eventName] = events[eventName].filter(
            listener => listener.thisArg !== thisArg
        );
    });
};

/**
 * Fires an event to listeners.
 * @param {object} pageRef - Reference of the page that represents the event scope.
 * @param {string} eventName - Name of the event to fire.
 * @param {*} payload - Payload of the event to fire.
 */
const fireEvent = (pageRef, eventName, payload) => {
    if (events[eventName]) {
        const listeners = events[eventName];
        listeners.forEach(listener => {
            try {
                listener.callback.call(listener.thisArg, payload);
            } catch (error) {
                // fail silently
            }
        });
    }
};

export {
    registerListener,
    unregisterListener,
    unregisterAllListeners,
    fireEvent
};



/*** load JS or CSS from static resource ***/
import playersTableCSS from '@salesforce/resourceUrl/playersTableCSS';
import { loadStyle } from 'lightning/platformResourceLoader';

renderedCallback() {
        Promise.all([
            loadStyle(this, playersTableCSS) //specified filename
        ]).then(() => {
            window.console.log('Files loaded.');
        }).catch(error => {
            window.console.log("Error " + error.body.message);
        });
    }


/*** lightning:workspaceAPI WORKAROUND ***/
https://mtr-design.com/news/salesforce-mini-how-to-open-a-subtab-in-console-from-lightning-web-component

invokeWorkspaceAPI(methodName, methodArgs) {
    return new Promise((resolve, reject) => {
        const apiEvent = new CustomEvent("internalapievent", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: {
                category: "workspaceAPI",
                methodName: methodName,
                methodArgs: methodArgs,
                callback: (err, response) => {
                    if (err) {
                        return reject(err);
                    } else {
                        return resolve(response);
                    }
                }
            }
        });

        window.dispatchEvent(apiEvent);
    });
}
    
Call it
this.invokeWorkspaceAPI('isConsoleNavigation').then(isConsole => {
   if (isConsole) {
       this.invokeWorkspaceAPI('openTab', {
           recordId: oppId,
           focus: true
       }).then(tabId => {
           console.log("Solution #2 - SubTab ID: ", tabId);
       });
   }
 
 Or async/await
 let isConsole = await this.invokeWorkspaceAPI('isConsoleNavigation');
            
if (isConsole) {
    let focusedTab = await this.invokeWorkspaceAPI('getFocusedTabInfo');
    console.log('focusedTab', JSON.parse(JSON.stringify(focusedTab)));

    await this.invokeWorkspaceAPI('openTab', {recordId: oppId, focus: true});

    await this.invokeWorkspaceAPI('closeTab', {tabId: focusedTab.tabId});
} else {
    window.open('/' + oppId, '_self');
}
